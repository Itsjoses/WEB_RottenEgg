package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gorm.io/gorm"
)

// User is the resolver for the User field.
func (r *buildListResolver) User(ctx context.Context, obj *model.BuildList) (*model.User, error) {
	var user *model.User
	return user, r.DB.Where("id like ?", obj.UserId).Take(&user).Error
}

// CreateBuildList is the resolver for the CreateBuildList field.
func (r *mutationResolver) CreateBuildList(ctx context.Context, userID string, name string) (*model.BuildList, error) {
	buildList := &model.BuildList{
		ID:        uuid.NewString(),
		UserId:    userID,
		BuildName: name,
	}
	r.DB.Create(buildList)
	return buildList, nil
}

// UpdateBuildList is the resolver for the UpdateBuildList field.
func (r *mutationResolver) UpdateBuildList(ctx context.Context, id string, name string) (*model.BuildList, error) {
	var buildlist *model.BuildList
	r.DB.Where("id like ?", id).Take(&buildlist).Updates(model.BuildList{
		BuildName: name,
	})
	return buildlist, nil
}

// DeleteBuildList is the resolver for the DeleteBuildList field.
func (r *mutationResolver) DeleteBuildList(ctx context.Context, id string) (*model.BuildList, error) {
	var buildlist *model.BuildList
	r.DB.Where("id like ?", id).Delete(&buildlist)
	return nil, nil
}

// GetAllBuildList is the resolver for the GetAllBuildList field.
func (r *queryResolver) GetAllBuildList(ctx context.Context, userID string) ([]*model.BuildList, error) {
	var allbuildlist []*model.BuildList
	err := r.DB.Where("user_id like ?", userID).Find(&allbuildlist).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, gqlerror.Errorf("There's no item in here")
		}
	}
	return allbuildlist, nil
}

// GetAllProductSelected is the resolver for the getAllProductSelected field.
func (r *queryResolver) GetAllProductSelected(ctx context.Context, typeArg string, section string) ([]*model.Product, error) {
	var search = typeArg + section
	var products []*model.Product
	var category *model.Category
	r.DB.Where("category_name like ?", search).Take(&category)
	r.DB.Where("category_id like ?", category.ID).Find(&products)
	return products, nil
}

// BuildList returns BuildListResolver implementation.
func (r *Resolver) BuildList() BuildListResolver { return &buildListResolver{r} }

type buildListResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *buildListResolver) BuildListDetail(ctx context.Context, obj *model.BuildList) ([]*model.BuildListDetail, error) {
	var buildlistdetail []*model.BuildListDetail
	return buildlistdetail, r.DB.Where("build_id like ?", obj.ID).Find(&buildlistdetail).Error
}
