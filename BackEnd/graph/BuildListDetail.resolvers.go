package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	database "github.com/Itsjose.s/gqlgen-todos/Database"
	"github.com/Itsjose.s/gqlgen-todos/graph/model"
)

// BuildList is the resolver for the BuildList field.
func (r *buildListDetailResolver) BuildList(ctx context.Context, obj *model.BuildListDetail) (*model.BuildList, error) {
	var buildlist *model.BuildList
	return buildlist, r.DB.Where("id like ?", obj.BuildListId).Take(&buildlist).Error
}

// Product is the resolver for the Product field.
func (r *buildListDetailResolver) Product(ctx context.Context, obj *model.BuildListDetail) (*model.Product, error) {
	var product *model.Product
	return product, r.DB.Where("id like ?", obj.ProductId).Take(&product).Error
}

// InsertItem is the resolver for the InsertItem field.
func (r *mutationResolver) InsertItem(ctx context.Context, productID string, buildListID string) (*model.BuildListDetail, error) {
	db := database.GetDB()
	var check *model.BuildListDetail
	err := db.Model(check).Where("build_list_id like ? and product_id like ?", buildListID, productID).Take(&check).Error
	if err != nil {
		fmt.Print("testing")
		insert := &model.BuildListDetail{
			BuildListId: buildListID,
			ProductId:   productID,
			Quantity:    1,
		}
		r.DB.Create(insert)
	} else {
		return nil, nil
	}
	return nil, nil
}

// DeleteItem is the resolver for the DeleteItem field.
func (r *mutationResolver) DeleteItem(ctx context.Context, buildListID string) (*model.BuildListDetail, error) {
	var delete *model.BuildListDetail
	r.DB.Where("build_list_id like ?", buildListID).Delete(&delete)
	return delete, nil
}

// AddCart is the resolver for the AddCart field.
func (r *mutationResolver) AddCart(ctx context.Context, buildListID string, userID string) (*model.BuildListDetail, error) {
	var allitem []*model.BuildListDetail
	r.DB.Where("build_list_id like ?", buildListID).Find(&allitem)
	for i := 0; i < len(allitem); i++ {
		carts := &model.Cart{
			UserId:    userID,
			ProductId: allitem[i].ProductId,
			Quantity:  allitem[i].Quantity,
			Status:    "NoSave",
		}
		r.DB.Create(carts)
	}
	return nil, nil
}

// UpdateQuantity is the resolver for the UpdateQuantity field.
func (r *mutationResolver) UpdateQuantity(ctx context.Context, buildListID string, quantity int) (*model.BuildListDetail, error) {
	r.DB.Where("build_list_id like ?", buildListID).Updates(model.BuildListDetail{
		Quantity: quantity,
	})
	return nil, nil
}

// GetAllItem is the resolver for the GetAllItem field.
func (r *queryResolver) GetAllItem(ctx context.Context, buildListID string) ([]*model.BuildListDetail, error) {
	var allitem []*model.BuildListDetail
	r.DB.Where("build_list_id like ?", buildListID).Find(&allitem)
	return allitem, nil
}

// BuildListDetail returns BuildListDetailResolver implementation.
func (r *Resolver) BuildListDetail() BuildListDetailResolver { return &buildListDetailResolver{r} }

type buildListDetailResolver struct{ *Resolver }
