package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
	"github.com/google/uuid"
)

// CreateNewHeader is the resolver for the CreateNewHeader field.
func (r *mutationResolver) CreateNewHeader(ctx context.Context, userID string) (*model.TransactionHeader, error) {
	header := &model.TransactionHeader{
		ID:     uuid.NewString(),
		UserId: userID,
		Status: "Pending",
	}
	r.DB.Create(header)

	var carts []*model.Cart
	r.DB.Where("user_id like ? and status like ?", userID, "NoSave").Find(&carts)

	for i := 0; i < len(carts); i++ {
		detail := &model.TransactionDetail{
			TransactionHeaderId: header.ID,
			ProductId:           carts[i].ProductId,
			Quantity:            carts[i].Quantity,
		}
		r.DB.Create(detail)
	}
	return header, nil
}

// TransactionHeaderDone is the resolver for the TransactionHeaderDone field.
func (r *queryResolver) TransactionHeaderDone(ctx context.Context, userID string) (*model.TransactionHeader, error) {
	var transactionheader *model.TransactionHeader
	r.DB.Where("user_id like ? and status like ?", userID, "Done").Take(&transactionheader)
	return transactionheader, nil
}

// TransactionHeaderPending is the resolver for the TransactionHeaderPending field.
func (r *queryResolver) TransactionHeaderPending(ctx context.Context, userID string) (*model.TransactionHeader, error) {
	var transactionheader *model.TransactionHeader
	r.DB.Where("user_id like ? and status like ?", userID, "Pending").Take(&transactionheader)
	return transactionheader, nil
}

// TransactionHeaderCancle is the resolver for the TransactionHeaderCancle field.
func (r *queryResolver) TransactionHeaderCancle(ctx context.Context, userID string) (*model.TransactionHeader, error) {
	panic(fmt.Errorf("not implemented: TransactionHeaderCancle - TransactionHeaderCancle"))
}

// User is the resolver for the User field.
func (r *transactionHeaderResolver) User(ctx context.Context, obj *model.TransactionHeader) (*model.User, error) {
	var user *model.User
	return user, r.DB.Where("id like ?", obj.UserId).Take(&user).Error
}

// TransactionDetail is the resolver for the TransactionDetail field.
func (r *transactionHeaderResolver) TransactionDetail(ctx context.Context, obj *model.TransactionHeader) ([]*model.TransactionDetail, error) {
	var transactionDetail []*model.TransactionDetail
	return transactionDetail, r.DB.Where("transaction_header_id like ?", obj.ID).Find(&transactionDetail).Error
}

// TransactionHeader returns TransactionHeaderResolver implementation.
func (r *Resolver) TransactionHeader() TransactionHeaderResolver {
	return &transactionHeaderResolver{r}
}

type transactionHeaderResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *transactionHeaderResolver) Status(ctx context.Context, obj *model.TransactionHeader) (string, error) {
	panic(fmt.Errorf("not implemented: Status - Status"))
}
