package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
	"github.com/google/uuid"
)

// CreateNewQueue is the resolver for the CreateNewQueue field.
func (r *mutationResolver) CreateNewQueue(ctx context.Context, id string, userID string) ([]*model.ReviewQueue, error) {
	var carts []*model.TransactionDetail
	r.DB.Where("transaction_header_id like ?", id).Find(&carts)
	for i := 0; i < len(carts); i++ {
		reviewQueue := &model.ReviewQueue{
			ID:        uuid.NewString(),
			UserId:    userID,
			ProductId: carts[i].ProductId,
			Quantity:  carts[i].Quantity,
		}
		r.DB.Create(reviewQueue)
	}
	return nil, nil
}

// DoneQueue is the resolver for the DoneQueue field.
func (r *mutationResolver) DoneQueue(ctx context.Context, id string) (*model.ReviewQueue, error) {
	var carts *model.ReviewQueue
	r.DB.Where("id like ?", id).Take(&carts).Delete(&carts)
	return nil, nil
}

// GetQueue is the resolver for the getQueue field.
func (r *queryResolver) GetQueue(ctx context.Context, userID string) ([]*model.ReviewQueue, error) {
	var carts []*model.ReviewQueue
	r.DB.Where("user_id like ?", userID).Find(&carts)
	return carts, nil
}

// User is the resolver for the User field.
func (r *reviewQueueResolver) User(ctx context.Context, obj *model.ReviewQueue) (*model.User, error) {
	var user *model.User
	return user, r.DB.Where("id like ?", obj.UserId).Take(&user).Error
}

// Product is the resolver for the Product field.
func (r *reviewQueueResolver) Product(ctx context.Context, obj *model.ReviewQueue) (*model.Product, error) {
	var Product *model.Product
	return Product, r.DB.Where("id like ?", obj.ProductId).Take(&Product).Error
}

// ReviewQueue returns ReviewQueueResolver implementation.
func (r *Resolver) ReviewQueue() ReviewQueueResolver { return &reviewQueueResolver{r} }

type reviewQueueResolver struct{ *Resolver }
