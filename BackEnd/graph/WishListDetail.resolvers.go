package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
	"github.com/google/uuid"
)

// User is the resolver for the User field.
func (r *followedResolver) User(ctx context.Context, obj *model.Followed) (*model.User, error) {
	var userfor *model.User
	return userfor, r.DB.Where("id like ?", obj.UserId).Take(&userfor).Error
}

// WishList is the resolver for the WishList field.
func (r *followedResolver) WishList(ctx context.Context, obj *model.Followed) (*model.WishList, error) {
	var wishlistfor *model.WishList
	return wishlistfor, r.DB.Where("id like ?", obj.WishListId).Take(&wishlistfor).Error
}

// CreateWishListDetail is the resolver for the createWishListDetail field.
func (r *mutationResolver) CreateWishListDetail(ctx context.Context, wishListIDCheck string, productIDCheck string) (*model.WishListDetail, error) {
	var wishlist *model.WishList
	var product *model.Product
	r.DB.Where("id like ?", productIDCheck).Take(&product)
	r.DB.Where("id like ?", wishListIDCheck).Take(&wishlist)
	wishlistdetail := &model.WishListDetail{
		WishList:   wishlist,
		WishListId: wishlist.ID,
		ProductId:  product.ID,
		Product:    product,
	}
	r.DB.Create(wishlistdetail)
	return wishlistdetail, nil
}

// CreateDuplicate is the resolver for the createDuplicate field.
func (r *mutationResolver) CreateDuplicate(ctx context.Context, id string, name string, privacy string, userID string) (*model.WishList, error) {
	var user *model.User
	r.DB.Where("id like ?", userID).Take(&user)
	wishlist := &model.WishList{
		ID:      uuid.NewString(),
		Name:    name,
		Privacy: privacy,
		UserId:  userID,
	}

	r.DB.Create(wishlist)

	var wishlistdetail []*model.WishListDetail
	r.DB.Where("wish_list_id like ?", id).Find(&wishlistdetail)
	arrlen := len(wishlistdetail)
	for i := 0; i < arrlen; i++ {
		wishlistdetailinsert := &model.WishListDetail{
			WishList:   wishlist,
			WishListId: wishlist.ID,
			Product:    wishlistdetail[i].Product,
			ProductId:  wishlistdetail[i].ProductId,
		}
		r.DB.Create(wishlistdetailinsert)
	}

	return wishlist, nil
}

// CreateFollow is the resolver for the createFollow field.
func (r *mutationResolver) CreateFollow(ctx context.Context, userID string, wishlistID string) (*model.Followed, error) {
	var user *model.User
	r.DB.Where("id like ?", userID).Take(&user)
	var wishlist *model.WishList
	r.DB.Where("id like ?", wishlistID).Take(&wishlist)
	followed := &model.Followed{
		User:       user,
		UserId:     user.ID,
		WishList:   wishlist,
		WishListId: wishlist.ID,
	}
	r.DB.Create(followed)
	return followed, nil
}

// Unfollow is the resolver for the unfollow field.
func (r *mutationResolver) Unfollow(ctx context.Context, userID string, wishlistIs string) (*model.Followed, error) {
	var followed *model.Followed
	r.DB.Where("user_id like ? and wish_list_id like ?", userID, wishlistIs).Limit(1).Delete(&followed)
	return followed, nil
}

// GetWishListDetail is the resolver for the GetWishListDetail field.
func (r *queryResolver) GetWishListDetail(ctx context.Context, id string) (*model.WishList, error) {
	var wishlist *model.WishList
	r.DB.Where("id like ?", id).Take(&wishlist)
	return wishlist, nil
}

// GetPublicWishListDetail is the resolver for the GetPublicWishListDetail field.
func (r *queryResolver) GetPublicWishListDetail(ctx context.Context, id string) (*model.WishList, error) {
	panic(fmt.Errorf("not implemented: GetPublicWishListDetail - GetPublicWishListDetail"))
}

// GetPublicWishList is the resolver for the GetPublicWishList field.
func (r *queryResolver) GetPublicWishList(ctx context.Context, id string) ([]*model.WishList, error) {
	var wishlist []*model.WishList
	r.DB.Where("user_id not like ?", id).Find(&wishlist)
	return wishlist, nil
}

// GetFollowed is the resolver for the GetFollowed field.
func (r *queryResolver) GetFollowed(ctx context.Context, id string) (*model.User, error) {
	var users *model.User
	r.DB.Where("id like ?", id).Take(&users)
	return users, nil
}

// Product is the resolver for the Product field.
func (r *wishListDetailResolver) Product(ctx context.Context, obj *model.WishListDetail) (*model.Product, error) {
	var product *model.Product
	return product, r.DB.Where(&model.Product{ID: obj.ProductId}).Limit(1).Find(&product).Error
}

// Followed returns FollowedResolver implementation.
func (r *Resolver) Followed() FollowedResolver { return &followedResolver{r} }

// WishListDetail returns WishListDetailResolver implementation.
func (r *Resolver) WishListDetail() WishListDetailResolver { return &wishListDetailResolver{r} }

type followedResolver struct{ *Resolver }
type wishListDetailResolver struct{ *Resolver }
