package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
)

// User is the resolver for the User field.
func (r *cartResolver) User(ctx context.Context, obj *model.Cart) (*model.User, error) {
	var user *model.User
	return user, r.DB.Where("id like ?", obj.UserId).Take(&user).Error
	// panic(fmt.Errorf("not implemented: User - User"))
}

// Product is the resolver for the Product field.
func (r *cartResolver) Product(ctx context.Context, obj *model.Cart) (*model.Product, error) {
	var product *model.Product
	return product, r.DB.Where("id like ?", obj.ProductId).Take(&product).Error
}

// CreateNewCart is the resolver for the CreateNewCart field.
func (r *mutationResolver) CreateNewCart(ctx context.Context, userID string, productID string, quantity int) (*model.Cart, error) {
	var carts *model.Cart
	err := r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Error
	if err != nil {
		carts = &model.Cart{
			UserId:    userID,
			ProductId: productID,
			Quantity:  quantity,
			// User:    user,
			Status: "NoSave",
		}
		r.DB.Create(carts)
	} else {
		r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Updates(model.Cart{
			Quantity: quantity,
		})
	}
	return carts, nil
}

// DeleteCart is the resolver for the DeleteCart field.
func (r *mutationResolver) DeleteCart(ctx context.Context, userID string, productID string) (*model.Cart, error) {
	var cart *model.Cart
	r.DB.Where("user_id like ? and product_id like ? and status like ?", userID, productID, "NoSave").Take(&cart).Delete(&cart)
	return nil, nil
}

// CheckoutCart is the resolver for the CheckoutCart field.
func (r *mutationResolver) CheckoutCart(ctx context.Context, userID string) (*model.Cart, error) {
	var carts []*model.Cart
	r.DB.Where("user_id like ?", userID).Delete(&carts)
	return nil, nil
}

// SaveCart is the resolver for the SaveCart field.
func (r *mutationResolver) SaveCart(ctx context.Context, userID string, productID string) (*model.Cart, error) {
	var carts *model.Cart
	r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Updates(model.Cart{
		Status: "Save",
	})
	return carts, nil
}

// UnSaveCart is the resolver for the UnSaveCart field.
func (r *mutationResolver) UnSaveCart(ctx context.Context, userID string, productID string) (*model.Cart, error) {
	var carts *model.Cart
	r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Updates(model.Cart{
		Status: "NoSave",
	})
	return carts, nil
}

// IncrementCart is the resolver for the IncrementCart field.
func (r *mutationResolver) IncrementCart(ctx context.Context, userID string, productID string) (*model.Cart, error) {
	var carts *model.Cart
	r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Updates(model.Cart{
		Quantity: carts.Quantity + 1,
	})
	return carts, nil
}

// DecrementCart is the resolver for the DecrementCart field.
func (r *mutationResolver) DecrementCart(ctx context.Context, userID string, productID string) (*model.Cart, error) {
	var carts *model.Cart
	r.DB.Where("user_id like ? and product_id like ?", userID, productID).Take(&carts).Updates(model.Cart{
		Quantity: carts.Quantity - 1,
	})
	return carts, nil
}

// GetUserCart is the resolver for the GetUserCart field.
func (r *queryResolver) GetUserCart(ctx context.Context, userID string) ([]*model.Cart, error) {
	var carts []*model.Cart
	r.DB.Where("user_id like ?", userID).Find(&carts)
	return carts, nil
}

// GetUserSaveCart is the resolver for the GetUserSaveCart field.
func (r *queryResolver) GetUserSaveCart(ctx context.Context, userID string) ([]*model.Cart, error) {
	var carts []*model.Cart
	r.DB.Where("user_id like ? and status like ?", userID, "Save").Find(&carts)
	return carts, nil
}

// GetUserNoSaveCart is the resolver for the GetUserNoSaveCart field.
func (r *queryResolver) GetUserNoSaveCart(ctx context.Context, userID string) ([]*model.Cart, error) {
	var carts []*model.Cart
	r.DB.Where("user_id like ? and status like ?", userID, "NoSave").Find(&carts)
	return carts, nil
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

type cartResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *cartResolver) Status(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: Status - Status"))
}
