package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Itsjose.s/gqlgen-todos/graph/model"
)

// CreateReview is the resolver for the CreateReview field.
func (r *mutationResolver) CreateReview(ctx context.Context, input model.ReviewInput) (*model.Review, error) {
	review := &model.Review{
		ProductId: input.ProductID,
		UserId:    input.UserID,
		ShopId:    input.ShopID,
		Note:      input.Note,
	}
	r.DB.Create(review)
	return review, nil
}

// Product is the resolver for the Product field.
func (r *reviewResolver) Product(ctx context.Context, obj *model.Review) (*model.Product, error) {
	var product *model.Product
	return product, r.DB.Where("id like ?", obj.ProductId).Take(&product).Error
}

// User is the resolver for the User field.
func (r *reviewResolver) User(ctx context.Context, obj *model.Review) (*model.User, error) {
	var user *model.User
	return user, r.DB.Where("id like ?", obj.UserId).Take(&user).Error
}

// Shop is the resolver for the Shop field.
func (r *reviewResolver) Shop(ctx context.Context, obj *model.Review) (*model.Shop, error) {
	var shop *model.Shop
	return shop, r.DB.Where("id like ?", obj.ShopId).Take(&shop).Error
}

// Star is the resolver for the Star field.
func (r *reviewResolver) Star(ctx context.Context, obj *model.Review) (int, error) {
	panic(fmt.Errorf("not implemented: Star - Star"))
}

// Review returns ReviewResolver implementation.
func (r *Resolver) Review() ReviewResolver { return &reviewResolver{r} }

type reviewResolver struct{ *Resolver }
